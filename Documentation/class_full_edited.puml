@startuml class_full
title Auto generated class diagram

package utils {
class Action{
+id: str
+direction: Direction
+ __init__(id: str, direction: Direction) -> None
}
Action *-- Direction : direction

enum Direction {
    UP
    RIGHT
    DOWN
    LEFT
}

enum Strategy {
    EXPLORATION
    AGRESSION
    DEFENSE
    RANDOM
}

}
package back {
class Agent{
-_id: str
-_x: int
-_y: int
-_start_x: int
-_start_y: int
-_last_direction: Direction
-_score: int
-_team: int
+ __init__(team: int, id: str, x, y) -> None
+ get_position() -> tuple[int, int]
+ get_last_direction() -> Direction
+ get_id() -> str
+ add_score(value: int) -> None
+ get_score() -> int
+ move(direction: Direction) -> None
+ try_move(direction: Direction) -> tuple[int, int]
+ respawn()
+ get_team() -> int
+ get_x() -> int
+ get_y() -> int
}

class AgentManager{
-_teams: list[Team]
+ __init__() -> None
+ load(source: list[str], board_size: tuple[int, int]) -> None
+ apply(action: Action) -> bool
+ update_perceptions(board_manager: BoardManager) -> None
+ get_agent(id: str) -> Agent
+ get_all_agents() -> tuple[Agent]
+ get_teams() -> tuple[Team]
+ get_ids() -> tuple[str]
+ reset() -> None
}
AgentManager *-- Team : _teams

class Board{
-_cells: list[list[Cell]]
-_width: int
-_height: int
+ __init__() -> None
+ set_board(board: list[list[Cell]]) -> None
+ set_cell(x, y, value: Cell) -> None
+ get_cell(x, y) -> Cell
+ get_all() -> list[list[Cell]]
+ get_size() -> tuple[int, int]
+ __str__() -> str
}
Board *-r- Cell : _cells

enum Cell {
    EMPTY
    WALL
    DOOR
    PAC_DOT
    PAC_GUM
    PIPE
    UNKNOWN
}

class BoardManager{
-_board: Board
-_initial_board: Board
+ __init__() -> None
+ load(source: list[str]) -> None
+ get_cell(position: tuple[int, int]) -> Cell
+ get_all_cells() -> list[list[Cell]]
+ get_board_size() -> tuple[int, int]
+ set_cell(position: tuple[int, int], cell: Cell) -> None
+ get_collisions(agents: tuple[Agent]) -> list[tuple[str, str]]
+ get_vision(agent: Agent, other_agents: tuple[Agent]) -> Perception
+ reset() -> None
}
BoardManager *-- Board : _board
BoardManager *-- Board : _initial_board

class Ghost{
-_panic: bool
+ __init__(team: int, id: str, x, y) -> None
+ get_panic() -> None
+ set_panic(state: bool) -> None
}
Ghost <|-- Agent

class Pacman{
+ __init__(team: int, id: str, x, y) -> None
}
Pacman <|-- Agent

class PacmanGame{
-_board_manager: BoardManager
-_agent_manager: AgentManager
-_path_board: str
-_history: list[list[Action]]
+ __init__() -> None
+ load_map(path: str) -> None
+ gather_state() -> tuple[Team]
+ gather_cli_state() -> tuple[list[list[Cell]], list[Agent]]
+ step(actions: list[Action]) -> None
+ _can_apply(action: Action) -> bool
+ _apply(action) -> None
+ get_board_size() -> tuple[int, int]
+ reset() -> None
+ get_history() -> None
}
PacmanGame *-- BoardManager : _board_manager
PacmanGame *-- AgentManager : _agent_manager

class Perception{
-_board: Board
-_last_seen: dict[str: list[int, int, int]]  # time, x, y
+ __init__(board_size: tuple[int, int]) -> None
+ set_board(board: Board) -> None
+ step_time() -> None
+ update(other: 'Perception') -> None
+ get_board() -> Board
+ get_last_seen() -> dict
+ update_agent_seen(agent_id, position) -> None
+ __str__() -> str
}
Perception *-- Board : _board

class Team{
-_pacman: Pacman
-_ghosts: list[Ghost]
-_perception: Perception
-_score: int
+ __init__(board_size: tuple[int, int]) -> None
+ set_pacman(value: Pacman) -> None
+ add_ghost(value: Ghost) -> None
+ get_agents() -> tuple[Agent]
+ get_agent(id: str) -> Agent
+ get_pacman() -> Pacman
+ get_ghosts() -> tuple[Ghost]
+ get_ids() -> tuple[str]
+ get_perception() -> Perception
+ get_score() -> int
+ update_perception(board_manager: BoardManager, other_team: 'Team') -> None
+ reset() -> None
}
Team *-- Pacman : _pacman
Team *-- Ghost : _ghosts
Team *-- Perception : _perception

}
package algorithms {
class AStar{
+ __init__(game_map, start_cell, goal_cell)
+ cost()
+ manhattan(current_cell)
+ euclidean(current_cell)
}

class GhostBrain{
+ __init__()
+ compute_action(strat: Strategy, team: Team, id: str) -> Action
}
GhostBrain <|-- Brain
GhostBrain *-- AStar
GhostBrain *-- HunterPrey
GhostBrain *-- QIteration

class HunterPrey{
+ __init__()
}

class PacmanBrain{
+ __init__()
+ compute_action(strat: Strategy, team: Team, id: str) -> Action
}
PacmanBrain <|-- Brain
PacmanBrain *-- AStar
PacmanBrain *-- HunterPrey
PacmanBrain *-- QIteration

class QIteration{
+ __init__()
}

class Utility{

}
Utility *-- FloodFill
Utility *-- AStar
class FloodFill{
- _board: Board
+ distance_to_closest_cell(x, y, search: Cell)
}

}
package front/cli {
class CliReplay{
-_path_board: str
-_history: list[list[Action]]
-_fancy_walls: list[list[str]]
-_step_count: int
+ __init__(environment: PacmanGame) -> None
+ _start(stdscr) -> None
+ main_loop() -> None
+ display() -> None
+ _load_fancy_walls() -> list[list[str]]
}

}

class Main{
+id_team_a: tuple[str]
+id_team_b: tuple[str]
+brain_pacman: PacmanBrain
+brain_ghost: GhostBrain
+environment: PacmanGame
+ __init__() -> None
+ simulation_cycle() -> None
}
Main *-- PacmanBrain : brain_pacman
Main *-- GhostBrain : brain_ghost
Main *-- Utility : utility
Main *-l- PacmanGame : environment
Main o-r- CliReplay : replay

' invisible organisational links
Action -u[hidden]- AStar
BoardManager -r[hidden]- Team
Utility -r[hidden]- GhostBrain

@enduml
