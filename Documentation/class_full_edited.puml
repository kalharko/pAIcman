@startuml class_full
title Auto generated class diagram

package utils {
class Action{
+id: str
+direction: Direction
+ __init__(self, id: str, direction: Direction) -> None
}
Action *-- Direction : direction

enum Direction {
    UP
    RIGHT
    DOWN
    LEFT
}

enum Strategy {
    EXPLORATION
    AGRESSION
    DEFENSE
    RANDOM
}

}
package back {
class Agent{
-_id: str
-_x: int
-_y: int
-_start_x: int
-_start_y: int
-_last_direction: Direction
-_score: int
-_team: int
+ __init__(self, team: int, id: str, x: int, y: int) -> None
+ get_position(self) -> tuple[int, int]
+ get_last_direction(self) -> Direction
+ get_id(self) -> str
+ add_score(self, value: int) -> None
+ get_score(self) -> int
+ move(self, direction: Direction) -> None
+ try_move(self, direction: Direction) -> tuple[int, int]
+ respawn(self)
+ get_team(self) -> int
+ get_x(self) -> int
+ get_y(self) -> int
}

class AgentManager{
-_teams: list[Team]
+ __init__(self) -> None
+ load(self, source: list[str], board_size: tuple[int, int]) -> None
+ apply(self, action: Action) -> bool
+ update_perceptions(self, board_manager: BoardManager) -> None
+ get_agent(self, id: str) -> Agent
+ get_all_agents(self) -> tuple[Agent]
+ get_teams(self) -> tuple[Team]
+ get_ids(self) -> tuple[str]
+ reset(self) -> None
}
AgentManager *-- Team : _teams

class Board{
-_cells: list[list[Cell]]
-_width: int
-_height: int
+ __init__(self) -> None
+ set_board(self, board: list[list[Cell]]) -> None
+ set_cell(self, x: int, y: int, value: Cell) -> None
+ get_cell(self, x: int, y: int) -> Cell
+ get_all(self) -> list[list[Cell]]
+ get_size(self) -> tuple[int, int]
+ __str__(self) -> str
}
Board *-r- Cell : _cells

enum Cell {
    EMPTY
    WALL
    DOOR
    PAC_DOT
    PAC_GUM
    PIPE
    UNKNOWN
}

class BoardManager{
-_board: Board
-_initial_board: Board
+ __init__(self) -> None
+ load(self, source: list[str]) -> None
+ get_cell(self, position: tuple[int, int]) -> Cell
+ get_all_cells(self) -> list[list[Cell]]
+ get_board_size(self) -> tuple[int, int]
+ set_cell(self, position: tuple[int, int], cell: Cell) -> None
+ get_collisions(self, agents: tuple[Agent]) -> list[tuple[str, str]]
+ get_vision(self, agent: Agent, other_team_agents: tuple[Agent]) -> Perception
+ reset(self) -> None
}
BoardManager *-- Board : _board
BoardManager *-- Board : _initial_board

class Ghost{
-_panic: bool
+ __init__(self, team: int, id: str, x: int, y: int) -> None
+ get_panic(self) -> None
+ set_panic(self, state: bool) -> None
}
Ghost <|-- Agent

class Pacman{
+ __init__(self, team: int, id: str, x: int, y: int) -> None
}
Pacman <|-- Agent

class PacmanGame{
-_board_manager: BoardManager
-_agent_manager: AgentManager
-_path_board: str
-_history: list[list[Action]]
+ __init__(self) -> None
+ load_map(self, path: str) -> None
+ gather_state(self) -> tuple[Team]
+ gather_cli_state(self) -> tuple[list[list[Cell]], list[Agent]]
+ step(self, actions: list[Action]) -> None
+ _can_apply(self, action: Action) -> bool
+ _apply(self, action) -> None
+ get_board_size(self) -> tuple[int, int]
+ reset(self) -> None
+ get_history(self) -> None
}
PacmanGame *-- BoardManager : _board_manager
PacmanGame *-- AgentManager : _agent_manager

class Perception{
-_board: Board
-_last_seen: dict[str: list[int, int, int]]  # time, x, y
+ __init__(self, board_size: tuple[int, int]) -> None
+ set_board(self, board: Board) -> None
+ step_time(self) -> None
+ update(self, other: 'Perception') -> None
+ get_board(self) -> Board
+ get_last_seen(self) -> dict
+ update_agent_seen(self, agent_id, position) -> None
+ __str__(self) -> str
}
Perception *-- Board : _board

class Team{
-_pacman: Pacman
-_ghosts: list[Ghost]
-_perception: Perception
-_score: int
+ __init__(self, board_size: tuple[int, int]) -> None
+ set_pacman(self, value: Pacman) -> None
+ add_ghost(self, value: Ghost) -> None
+ get_agents(self) -> tuple[Agent]
+ get_agent(self, id: str) -> Agent
+ get_pacman(self) -> Pacman
+ get_ghosts(self) -> tuple[Ghost]
+ get_ids(self) -> tuple[str]
+ get_perception(self) -> Perception
+ get_score(self) -> int
+ update_perception(self, board_manager: BoardManager, other_team: 'Team') -> None
+ reset(self) -> None
}
Team *-- Pacman : _pacman
Team *-- Ghost : _ghosts
Team *-- Perception : _perception

}
package algorithms {
class AStar{
+ __init__(self, game_map, start_cell, goal_cell)
+ cost(self)
+ manhattan(self, current_cell)
+ euclidean(self, current_cell)
}

class GhostBrain{
+ __init__(self)
+ compute_action(self, strategy: Strategy, perception: Perception, id: str) -> Action
}
GhostBrain <|-- Brain
GhostBrain *-- AStar
GhostBrain *-- HunterPrey
GhostBrain *-- QIteration

class HunterPrey{
+ __init__(self)
}

class PacmanBrain{
+ __init__(self)
+ compute_action(self, strategy: Strategy, perception: Perception, id: str) -> Action
}
PacmanBrain <|-- Brain
PacmanBrain *-- AStar
PacmanBrain *-- HunterPrey
PacmanBrain *-- QIteration

class QIteration{
+ __init__(self)
}

}
package front/cli {
class CliReplay{
-_path_board: str
-_history: list[list[Action]]
-_fancy_walls: list[list[str]]
-_step_count: int
+ __init__(self, environment: PacmanGame) -> None
+ _start(self, stdscr) -> None
+ main_loop(self) -> None
+ display(self) -> None
+ _load_fancy_walls(self) -> list[list[str]]
}

}

class Main{
+id_team_a: tuple[str]
+id_team_b: tuple[str]
+brain_pacman: PacmanBrain
+brain_ghost: GhostBrain
+environment: PacmanGame
+ __init__(self) -> None
+ simulation_cycle(self) -> None
}
Main *-- PacmanBrain : brain_pacman
Main *-- GhostBrain : brain_ghost
Main *-l- PacmanGame : environment
Main o-r- CliReplay : replay

' invisible organisational links
Action -u[hidden]- AStar
BoardManager -r[hidden]- Team

@enduml
