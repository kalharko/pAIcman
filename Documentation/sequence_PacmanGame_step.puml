@startuml sequence_qlearning
title "Actor calls game step"

actor Algorithm
boundary PacmanGame
control AgentManager
control BoardManager


Algorithm -> PacmanGame : step([action(id, direction)])
activate PacmanGame

note left of PacmanGame
    Apply passed actions
end note

loop for all actions

PacmanGame -> PacmanGame : can_apply(action)
activate PacmanGame
PacmanGame -> AgentManager : get_agent(action.id)
PacmanGame <-- AgentManager : agent
PacmanGame -> BoardManager : get_cell(agent.get_position())
PacmanGame <-- BoardManager : cell
PacmanGame --> PacmanGame : bool
deactivate PacmanGame

PacmanGame -> PacmanGame : apply(action)
activate PacmanGame
PacmanGame -> AgentManager : apply(action)
PacmanGame <-- AgentManager : agent

PacmanGame -> BoardManager : set_cell(agent.get_position(), EMPTY)
PacmanGame <-- BoardManager

PacmanGame --> PacmanGame

deactivate PacmanGame

end

note left of PacmanGame
    Collisions
end note

PacmanGame -> AgentManager : get_all_agents()
PacmanGame <-- AgentManager : agents

PacmanGame -> BoardManager : get_collisions(agents)
PacmanGame <-- BoardManager : collisions

loop for all collisions
    PacmanGame -> PacmanGame : "apply collision effect"
end

Algorithm <-- PacmanGame : QLearningState
deactivate PacmanGame
@enduml
