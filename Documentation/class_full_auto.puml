@startuml class_full
title Auto generated class diagram
package utils {
class Action{
+id: str
+direction: Direction
+ __init__(self, id: str, direction: Direction) -> None
}
Action *-- Direction : direction

class Board{
-_cells: list[list[Cell]]
-_width: int
-_height: int
+ __init__(self) -> None
+ set_board(self, board: list[list[Cell]]) -> None
+ set_cell(self, x: int, y: int, value: Cell) -> None
+ get_cell(self, x: int, y: int) -> Cell
+ get_all(self) -> list[list[Cell]]
+ get_size(self) -> tuple[int, int]
+ __str__(self) -> str
}
Board *-- Cell : _cells

}
package back {
class Agent{
-_id: str
-_x: int
-_y: int
-_start_x: int
-_start_y: int
-_last_direction: Direction
-_score: int
-_team: int
+ __init__(self, team: int, id: str, x: int, y: int) -> None
+ get_position(self) -> tuple[int, int]
+ get_last_direction(self) -> Direction
+ get_id(self) -> str
+ add_score(self, value: int) -> None
+ get_score(self) -> int
+ move(self, direction: Direction) -> None
+ try_move(self, direction: Direction) -> tuple[int, int]
+ respawn(self)
+ get_team(self) -> int
+ get_x(self) -> int
+ get_y(self) -> int
}
Agent *-- Direction : _last_direction

class AgentManager{
-_agents: dict[Agent]
+ __init__(self) -> None
+ set_agents(self, agents: list[Agent]) -> None
+ apply(self, action: Action) -> bool
+ get_agent(self, id: str) -> Agent
+ get_all_agents(self) -> list[Agent]
}
AgentManager *-- Agent : _agents

class BoardManager{
-_board: Board
+ __init__(self) -> None
+ load(self, source: list[str]) -> None
+ get_cell(self, position: tuple[int, int]) -> Cell
+ get_all_cells(self) -> list[list[Cell]]
+ get_board_size(self) -> tuple[int, int]
+ set_cell(self, position: tuple[int, int], cell: Cell) -> None
+ get_collisions(self, agents: list[Agent]) -> list[tuple[str, str]]
+ get_vision(self, agent: Agent, agents: list[Agent]) -> tuple[Board, tuple[tuple[str, int, int]]]
}
BoardManager *-- Board : _board

class PacErrAgentInWall{
+ __init__(self, source: str = 'Unknown') -> None
}
PacErrAgentInWall <|-- PacErrGeneric

class Ghost{
-_panic: bool
+ __init__(self, team: int, id: str, x: int, y: int) -> None
+ get_panic(self) -> None
+ set_panic(self, state: bool) -> None
}
Ghost <|-- Agent

class Pacman{
+ __init__(self, team: int, id: str, x: int, y: int) -> None
}
Pacman <|-- Agent

class PacmanGame{
-_board_manager: BoardManager
-_agent_manager: AgentManager
-_path_board: str
-_history: list[list[Action]]
+ __init__(self) -> None
+ load_map(self, path: str) -> None
+ set_agents(self, agents: list[Agent]) -> None
+ gather_state(self) -> tuple[tuple[str, Board, tuple[tuple[str, int, int]]]]
+ gather_cli_state(self) -> tuple[list[list[Cell]], list[Agent]]
+ get_replay(self) -> tuple[str, list[Agent],list[list[Action]]]
+ step(self, actions: list[Action]) -> None
+ _can_apply(self, action: Action) -> bool
+ _apply(self, action) -> None
+ get_board_size(self) -> tuple[int, int]
}
PacmanGame *-- BoardManager : _board_manager
PacmanGame *-- AgentManager : _agent_manager
PacmanGame *-- Action : _history

}
package algorithms {
class AStar{
+ __init__(self, game_map, start_cell, goal_cell)
+ cost(self)
+ manhattan(self, current_cell)
+ euclidean(self, current_cell)
}

class GhostBrain{
+ __init__(self)
+ compute_action(self, strategy: Strategy, perception: Perception, id: str) -> Action
}

class HunterPrey{
+ __init__(self)
}

class Main{
+perception_team_a: Perception
+perception_team_b: Perception
+id_team_a: tuple[str]
+id_team_b: tuple[str]
+brain_pacman: PacmanBrain
+brain_ghost: GhostBrain
+environment: PacmanGame
+ __init__(self) -> None
+ simulation_cycle(self) -> None
+ mask_perception(self, board: Board, agent: Agent, agents: list[Agent]) -> Perception
}
Main *-- Perception : perception_team_a
Main *-- Perception : perception_team_b
Main *-- PacmanBrain : brain_pacman
Main *-- GhostBrain : brain_ghost
Main *-- PacmanGame : environment

class PacmanBrain{
+ __init__(self)
+ compute_action(self, strategy: Strategy, perception: Perception, id: str) -> Action
}

class Perception{
-_board: Board
-_last_seen: dict[str: list[int, int, int]]  # time, x, y
+ __init__(self, board_size: tuple[int, int], agent_ids: tuple[str]) -> None
+ set_board(self, board: Board) -> None
+ step_time(self) -> None
+ update(self, board: Board, agent_seen: tuple[tuple[str, int, int]]) -> None
+ __str__(self) -> str
}
Perception *-- Board : _board

class QIteration{
+ __init__(self)
}

}
package front/cli {
class CliReplay{
-_path_board: str
-_history: list[list[Action]]
-_fancy_walls: list[list[str]]
+ __init__(self, replay) -> None
+ _start(self, stdscr) -> None
+ main_loop(self) -> None
+ display(self) -> None
+ _load_fancy_walls(self) -> list[list[str]]
}
CliReplay *-- Action : _history

}
@enduml
