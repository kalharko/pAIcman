@startuml class_back

package back {
class PacmanGame {
	- _board_manager: BoardManager
	- _agent_manager: AgentManager

	+ gather_qlearning_state() -> QLearningState
	+ gather_cli_state() -> CliState
	+ step(list[Action]) -> None
	+ load_board(path: str) -> None, FileNotFoundError
	- _can_apply(action: Action) -> bool
	- _apply(action: Action) -> None
}

class BoardManager {
	- _board: Board

	+ load(path: str) -> None
	+ get_cell(position: tuple[int, int]) -> Cell, PacErrOutOfBoard
	+ set_cell(position: tuple[int, int], Cell) -> None,
	+ get_collisions(self, agents: list[Agent]) -> list[tuple[str, str]]
}

class AgentManager {
	- _agents: dict[Agent]

	+ apply(action: Action) -> Agent
	+ get_agent(id: str) -> Agent, PacErrUnknownAgentId
	+ get_all_agents() -> list[Agent]
}

class Agent {
	- _id: str
	- _x: int
	- _y: int
	- _last_direction: Direction

	+ get_position() -> tuple[int, int]
	+ get_last_direction() -> Direction
	+ get_id() -> str
	+ move(direction: Direction) -> None
	+ try_move(direction: Direction) -> tuple[int, int]
}

class ModelPacman {
	- _score: int
	+ add_score(value: int) -> None
	+ get_score() -> int
}

class ModelGhost {
	- _panic: bool

	+ get_panic() -> bool
	+ set_pacnic(state: bool) -> None
}


PacmanGame *-- AgentManager: agent_manager
PacmanGame *-- BoardManager: board
AgentManager *-- ModelPacman
AgentManager *-- ModelGhost

ModelPacman --|> Agent
ModelGhost --|> Agent
}

package utils {
class Board {
	- _cells: list[list[Cell]]

	+ get_cell(position: tuple[int, int]) -> Cell, PacErrOutOfBoard
	+ set_cell(position: tuple[int, int], Cell) -> None,
}

enum Cell {
	+ EMPTY = 0
	+ WALL = 1
	+ DOOR = 2
	+ PAC_DOT = 3
	+ PAC_GUM = 4
}

enum Direction {
	+ UP: 0
	+ LEFT: 1
	+ DOWN: 2
	+ RIGHT: 3
}

class Action {
	+ agent_id: str
	+ direction: Direction
}

Board +-- Cell: cells
Action +-- Direction
}


package front {
class CliReplay {
	+ init(replay: tuple[board, agents, history])
	- mainloop() -> None
	- display() -> None
	- load_fancy_walls() -> list[list[str]]
}
}

package algorithm {
class Main {
	- team_a_knowledge: Perception
	- team_b_knowledge: Perception
	+ init(hyperparameters)
	+ run() -> Results
	+ mask_perception() -> Board
	+ apply_perception()
	+ replay()
}
class QIteration {
}
class Astar {
}
class HunterPrey {
}

class PacmanBrain {
}
class GhostBrain {
}

class Perception {
	- board: Board
	- agents: list[Agent]
	+ append(to_add: Perception)
}

Main "1" *-- "2" Perception
Main *-- PacmanBrain
Main o-- GhostBrain
PacmanBrain *-- Astar
GhostBrain *-- Astar
PacmanBrain *-- HunterPrey
GhostBrain *-- HunterPrey
PacmanBrain *-- QIteration
GhostBrain *-- QIteration

}


BoardManager *-- Board : board

Main *-- PacmanGame : environment
Main o-r- CliReplay : front
Perception *-- Board : board

@enduml
