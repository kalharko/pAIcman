@startuml class_back

class PacmanGame {
	- _board_manager: BoardManager
	- _agent_manager: AgentManager

	+ gather_qlearning_state() -> QLearningState
	+ gather_cli_state() -> CliState
	+ step(list[Action]) -> None
	+ load_board(path: str) -> None, FileNotFoundError
	- _can_apply(action: Action) -> bool
	- _apply(action: Action) -> None
}

class BoardManager {
	- _cells: list[list[Cell]]

	+ load(path: str) -> None
	+ get_cell(position: tuple[int, int]) -> Cell, PacErrOutOfBoard
	+ set_cell(position: tuple[int, int], Cell) -> None,
	+ get_collisions(self, agents: list[Agent]) -> list[tuple[str, str]]
}

class AgentManager {
	- _agents: dict[Agent]

	+ apply(action: Action) -> Agent
	+ get_agent(id: str) -> Agent, PacErrUnknownAgentId
	+ get_all_agents() -> list[Agent]
}

enum Cell {
	+ EMPTY = 0
	+ WALL = 1
	+ DOOR = 2
	+ PAC_DOT = 3
	+ PAC_GUM = 4
}

class Agent {
	- _id: str
	- _x: int
	- _y: int
	- _last_direction: Direction

	+ get_position() -> tuple[int, int]
	+ get_last_direction() -> Direction
	+ get_id() -> str
	+ move(direction: Direction) -> None
	+ try_move(direction: Direction) -> tuple[int, int]
}

class Pacman {
	- _score: int
	+ add_score(value: int) -> None
	+ get_score() -> int
}

class Ghost {
	- _panic: bool

	+ get_panic() -> bool
	+ set_pacnic(state: bool) -> None
}

enum Direction {
	+ UP: 0
	+ LEFT: 1
	+ DOWN: 2
	+ RIGHT: 3
}

class Action {
	+ agent_id: str
	+ direction: Direction
}

exception PacErrGeneric {
}
exception PacErrOutOfBoard {
}
exception PacErrUnknownAgentId {
}
exception PacErrInvalidAction



PacmanGame *-- AgentManager: agent_manager
AgentManager *-- Agent: agents
PacmanGame *-- BoardManager: board
BoardManager +-- Cell: cells
Pacman --|> Agent
Ghost --|> Agent

Action +-r- Direction

BoardManager .. PacErrOutOfBoard
AgentManager .. PacErrUnknownAgentId
PacmanGame .. PacErrInvalidAction

PacErrGeneric <|-u- PacErrOutOfBoard
PacErrGeneric <|-u- PacErrUnknownAgentId
PacErrGeneric <|-u- PacErrInvalidAction

@enduml
